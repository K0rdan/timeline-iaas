# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the master branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
name: 'Terraform Deployment'

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Target environment deployment'
        required: true
        default: 'dev'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.target }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Check inputs
      if: github.event.inputs.target == 'dev'
      run: echo "Your input '${{ github.event.inputs.target }}' is valid !"

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Setup GCloud
      uses: google-github-actions/setup-gcloud@master
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    # TEMP
    - name: TEST CURL
      run: |
        curl -X POST 'https://app.terraform.io/api/v2/workspaces/${{ secrets.TF_WORKSPACE }}/vars' --header 'Content-Type:\ application/vnd.api+json' --header 'Authorization:\ Bearer ${{ secrets.TF_API_TOKEN }}' --data-raw '${{ format({{"data":{{"type":"vars","attributes":{{"key":"GOOGLE_CREDENTIALS","value":"TEST","description":"GCP credential associated to a specific project","category":"env","hcl":false,"sensitive": false}}}}}}) }}'
    # TEMP

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -reconfigure env/${{ github.event.inputs.target }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check env/${{ github.event.inputs.target }}

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan env/${{ github.event.inputs.target }}

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve
